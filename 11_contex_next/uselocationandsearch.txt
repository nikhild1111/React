

https://chatgpt.com/c/67ddb5cc-23e4-8000-99cb-2930ff8b24a5




useSearchParams and useLocation Hooks in React Router (Deep & Easy Explanation)
When building React applications with React Router, you often need to work with URLs, especially when handling query parameters. This is where the useSearchParams and useLocation hooks come into play.

1️⃣ useSearchParams Hook (Used for Query Parameters)
🔹 What is it?
useSearchParams is a hook provided by React Router that helps you read and modify query parameters (the part of a URL after ?).

🔹 Why use it?

It makes working with query parameters in React easy.

You don’t need to manually parse the URL.

You can easily get and set query parameters.

🔹 Example Scenario
👉 Suppose we have this URL:

arduino
Copy
Edit
http://example.com/products?category=shoes&price=low
Here, category=shoes and price=low are query parameters.

How to Use useSearchParams
✅ Reading Query Parameters
jsx
Copy
Edit
import { useSearchParams } from "react-router-dom";

function ProductPage() {
  // Get search params
  const [searchParams] = useSearchParams();

  // Read individual parameters
  const category = searchParams.get("category");
  const price = searchParams.get("price");

  return (
    <div>
      <h2>Category: {category}</h2>
      <h2>Price: {price}</h2>
    </div>
  );
}
🔍 What happens here?

useSearchParams() gives us access to the query parameters.

We use .get("parameter_name") to extract values.

📌 If the URL is:

arduino
Copy
Edit
http://example.com/products?category=shoes&price=low
💡 Output:

makefile
Copy
Edit
Category: shoes
Price: low
✅ Updating Query Parameters
You can also update query parameters dynamically.

jsx
Copy
Edit
import { useSearchParams } from "react-router-dom";

function ProductPage() {
  const [searchParams, setSearchParams] = useSearchParams();

  const updateCategory = () => {
    setSearchParams({ category: "electronics", price: "high" });
  };

  return (
    <div>
      <h2>Category: {searchParams.get("category")}</h2>
      <h2>Price: {searchParams.get("price")}</h2>
      <button onClick={updateCategory}>Update Category</button>
    </div>
  );
}
🔹 What happens when you click the button?

The URL instantly updates to:

arduino
Copy
Edit
http://example.com/products?category=electronics&price=high
The displayed values also change dynamically.

2️⃣ useLocation Hook (Used for Full URL & Path Info)
🔹 What is it?
useLocation is another React Router hook that provides information about the current URL, pathname, and search parameters.

🔹 Why use it?

Helps when you need the full URL details.

Useful for tracking navigation history.

Can be used for conditional rendering based on the path.

How to Use useLocation
✅ Getting the Current URL Path
jsx
Copy
Edit
import { useLocation } from "react-router-dom";

function CurrentPage() {
  const location = useLocation();

  return (
    <div>
      <h2>Current Path: {location.pathname}</h2>
      <h3>Full Search Params: {location.search}</h3>
    </div>
  );
}
📌 If the URL is:

arduino
Copy
Edit
http://example.com/products?category=shoes
💡 Output:

pgsql
Copy
Edit
Current Path: /products
Full Search Params: ?category=shoes
✅ Checking Current Path for Conditional Rendering
jsx
Copy
Edit
import { useLocation } from "react-router-dom";

function ShowMessage() {
  const location = useLocation();

  return (
    <div>
      {location.pathname === "/about" ? (
        <h2>Welcome to the About Page!</h2>
      ) : (
        <h2>Welcome to {location.pathname}!</h2>
      )}
    </div>
  );
}
📌 If URL is /about, it shows:

css
Copy
Edit
Welcome to the About Page!
📌 If URL is /products, it shows:

bash
Copy
Edit
Welcome to /products!
🚀 Key Differences Between useSearchParams and useLocation
Feature	useSearchParams	useLocation
Access Query Params	✅ Yes	✅ Yes (via .search)
Update Query Params	✅ Yes	❌ No
Access Full Path	❌ No	✅ Yes
Good for Navigation	❌ No	✅ Yes
🎯 When to Use What?
✅ Use useSearchParams when you only need query parameters and want to modify them.

✅ Use useLocation when you need the entire URL (path + search params) or track navigation.

🎉 Conclusion
useSearchParams helps manage query parameters easily.

useLocation helps get full URL details, including the path and query.

Both are super useful when working with React Router.

Would you like an example combining both? 🚀